Grading at 10/29/2024:14:03:51.656249
For commit ID bee359b9355c2a55cc88573a1aa39eff46cfefd5
Grading at Tue Oct 29 10:03:48 AM EDT 2024
Doing some basic checking for your submission

Step 1
Checking that story-step1 compiles
rm -f *~ story-step3 story-step4 story-step3.o story-step4.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step1.c
gcc -o story-step1 story-step1.o rand_story.o provided.o
rm story-step1.o
The code compiled (good)
Executable story-step1 exists (good)
Checking with provided test case story.txt
Your file matched the expected output
Now running YOUR tests for step 1

1.1: Current test is story-step1 story.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

Step 2
Checking that story-step2 compiles
rm -f *~ story-step3 story-step4 story-step3.o story-step4.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step2.c
gcc -o story-step2 story-step2.o rand_story.o provided.o
rm story-step2.o
The code compiled (good)
Executable story-step2 exists (good)
Now running YOUR tests for step 2

2.1: Current test is story-step2 words.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

Step 3
Checking that story-step3 compiles
rm -f *~ story-step3 story-step4 story-step3.o story-step4.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step3.c
gcc -o story-step3 story-step3.o rand_story.o provided.o
rm story-step3.o
The code compiled (good)
Executable story-step3 exists (good)
Now running YOUR tests for step 3

3.1: Current test is story-step3 words.txt story2.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind reported errors or memory leaks:
==2869427== Memcheck, a memory error detector
==2869427== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==2869427== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==2869427== Command: ./story-step3 words.txt story2.txt
==2869427== Parent PID: 2869426
==2869427== 
==2869427== 
==2869427== HEAP SUMMARY:
==2869427==     in use at exit: 56 bytes in 8 blocks
==2869427==   total heap usage: 38 allocs, 30 frees, 13,898 bytes allocated
==2869427== 
==2869427== 28 bytes in 4 blocks are definitely lost in loss record 2 of 2
==2869427==    at 0x4848899: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==2869427==    by 0x490B58E: strdup (strdup.c:42)
==2869427==    by 0x109F88: replace_category_with_backreference (rand_story.c:185)
==2869427==    by 0x10A145: read_template_with_backreference (rand_story.c:219)
==2869427==    by 0x1094A9: main (story-step3.c:22)
==2869427== 
==2869427== LEAK SUMMARY:
==2869427==    definitely lost: 28 bytes in 4 blocks
==2869427==    indirectly lost: 0 bytes in 0 blocks
==2869427==      possibly lost: 0 bytes in 0 blocks
==2869427==    still reachable: 28 bytes in 4 blocks
==2869427==         suppressed: 0 bytes in 0 blocks
==2869427== Reachable blocks (those to which a pointer was found) are not shown.
==2869427== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==2869427== 
==2869427== For lists of detected and suppressed errors, rerun with: -s
==2869427== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Step 4
Checking that story-step4 compiles
rm -f *~ story-step3 story-step4 story-step3.o story-step4.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step4.c
gcc -o story-step4 story-step4.o rand_story.o provided.o
rm story-step4.o
The code compiled (good)
Executable story-step4 exists (good)
Now running YOUR tests for step 4

4.1: Current test is story-step4 words.txt story2.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind reported errors or memory leaks:
==2869493== Memcheck, a memory error detector
==2869493== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==2869493== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==2869493== Command: ./story-step4 words.txt story2.txt
==2869493== Parent PID: 2869492
==2869493== 
==2869493== 
==2869493== HEAP SUMMARY:
==2869493==     in use at exit: 56 bytes in 8 blocks
==2869493==   total heap usage: 38 allocs, 30 frees, 13,898 bytes allocated
==2869493== 
==2869493== 28 bytes in 4 blocks are definitely lost in loss record 2 of 2
==2869493==    at 0x4848899: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==2869493==    by 0x490B58E: strdup (strdup.c:42)
==2869493==    by 0x109FC0: replace_category_with_backreference (rand_story.c:185)
==2869493==    by 0x10A17D: read_template_with_backreference (rand_story.c:219)
==2869493==    by 0x1094E1: main (story-step4.c:33)
==2869493== 
==2869493== LEAK SUMMARY:
==2869493==    definitely lost: 28 bytes in 4 blocks
==2869493==    indirectly lost: 0 bytes in 0 blocks
==2869493==      possibly lost: 0 bytes in 0 blocks
==2869493==    still reachable: 28 bytes in 4 blocks
==2869493==         suppressed: 0 bytes in 0 blocks
==2869493== Reachable blocks (those to which a pointer was found) are not shown.
==2869493== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==2869493== 
==2869493== For lists of detected and suppressed errors, rerun with: -s
==2869493== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

4.2: Current test is story-step4 -n words.txt story2.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind reported errors or memory leaks:
==2869534== Memcheck, a memory error detector
==2869534== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==2869534== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==2869534== Command: ./story-step4 -n words.txt story2.txt
==2869534== Parent PID: 2869533
==2869534== 
==2869534== 
==2869534== HEAP SUMMARY:
==2869534==     in use at exit: 56 bytes in 8 blocks
==2869534==   total heap usage: 41 allocs, 33 frees, 13,946 bytes allocated
==2869534== 
==2869534== 28 bytes in 4 blocks are definitely lost in loss record 2 of 2
==2869534==    at 0x4848899: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==2869534==    by 0x490B58E: strdup (strdup.c:42)
==2869534==    by 0x109FC0: replace_category_with_backreference (rand_story.c:185)
==2869534==    by 0x10A17D: read_template_with_backreference (rand_story.c:219)
==2869534==    by 0x1094E1: main (story-step4.c:33)
==2869534== 
==2869534== LEAK SUMMARY:
==2869534==    definitely lost: 28 bytes in 4 blocks
==2869534==    indirectly lost: 0 bytes in 0 blocks
==2869534==      possibly lost: 0 bytes in 0 blocks
==2869534==    still reachable: 28 bytes in 4 blocks
==2869534==         suppressed: 0 bytes in 0 blocks
==2869534== Reachable blocks (those to which a pointer was found) are not shown.
==2869534== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==2869534== 
==2869534== For lists of detected and suppressed errors, rerun with: -s
==2869534== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

You have NOT passed your test cases!
You should go and figure out/understand where thing went wrong
And fix the problem(s) before the deadline

Overall Grade: NO GRADE YET
