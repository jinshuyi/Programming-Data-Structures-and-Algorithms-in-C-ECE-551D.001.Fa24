Grading at 10/29/2024:14:37:11.828745
For commit ID 6b1fd885359e65cbb28a9bbec46e5e51f99071ab
Grading at Tue Oct 29 10:37:08 AM EDT 2024
Doing some basic checking for your submission

Step 1
Checking that story-step1 compiles
rm -f *~ story-step3  story-step3.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step1.c
gcc -o story-step1 story-step1.o rand_story.o provided.o
rm story-step1.o
The code compiled (good)
Executable story-step1 exists (good)
Checking with provided test case story.txt
Your file matched the expected output
Now running YOUR tests for step 1

1.1: Current test is story-step1 story.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

Step 2
Checking that story-step2 compiles
rm -f *~ story-step3  story-step3.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step2.c
gcc -o story-step2 story-step2.o rand_story.o provided.o
rm story-step2.o
The code compiled (good)
Executable story-step2 exists (good)
Now running YOUR tests for step 2

2.1: Current test is story-step2 words.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

Step 3
Checking that story-step3 compiles
rm -f *~ story-step3  story-step3.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step3.c
gcc -o story-step3 story-step3.o rand_story.o provided.o
rm story-step3.o
The code compiled (good)
Executable story-step3 exists (good)
Now running YOUR tests for step 3

3.1: Current test is story-step3 words.txt story2.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind reported errors or memory leaks:
==2942271== Memcheck, a memory error detector
==2942271== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==2942271== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==2942271== Command: ./story-step3 words.txt story2.txt
==2942271== Parent PID: 2942269
==2942271== 
==2942271== 
==2942271== HEAP SUMMARY:
==2942271==     in use at exit: 28 bytes in 4 blocks
==2942271==   total heap usage: 38 allocs, 34 frees, 13,898 bytes allocated
==2942271== 
==2942271== LEAK SUMMARY:
==2942271==    definitely lost: 0 bytes in 0 blocks
==2942271==    indirectly lost: 0 bytes in 0 blocks
==2942271==      possibly lost: 0 bytes in 0 blocks
==2942271==    still reachable: 28 bytes in 4 blocks
==2942271==         suppressed: 0 bytes in 0 blocks
==2942271== Reachable blocks (those to which a pointer was found) are not shown.
==2942271== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==2942271== 
==2942271== For lists of detected and suppressed errors, rerun with: -s
==2942271== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

Step 4
Checking that story-step4 compiles
rm -f *~ story-step3  story-step3.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step4.c
gcc -o story-step4 story-step4.o rand_story.o provided.o
rm story-step4.o
The code compiled (good)
Executable story-step4 exists (good)
Now running YOUR tests for step 4

4.1: Current test is story-step4 words.txt story2.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind reported errors or memory leaks:
==2942384== Memcheck, a memory error detector
==2942384== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==2942384== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==2942384== Command: ./story-step4 words.txt story2.txt
==2942384== Parent PID: 2942383
==2942384== 
==2942384== 
==2942384== HEAP SUMMARY:
==2942384==     in use at exit: 230 bytes in 18 blocks
==2942384==   total heap usage: 38 allocs, 20 frees, 13,898 bytes allocated
==2942384== 
==2942384== 202 (16 direct, 186 indirect) bytes in 1 blocks are definitely lost in loss record 7 of 7
==2942384==    at 0x4848899: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==2942384==    by 0x109801: readWords2 (rand_story.c:58)
==2942384==    by 0x1094B4: main (story-step4.c:30)
==2942384== 
==2942384== LEAK SUMMARY:
==2942384==    definitely lost: 16 bytes in 1 blocks
==2942384==    indirectly lost: 186 bytes in 13 blocks
==2942384==      possibly lost: 0 bytes in 0 blocks
==2942384==    still reachable: 28 bytes in 4 blocks
==2942384==         suppressed: 0 bytes in 0 blocks
==2942384== Reachable blocks (those to which a pointer was found) are not shown.
==2942384== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==2942384== 
==2942384== For lists of detected and suppressed errors, rerun with: -s
==2942384== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

4.2: Current test is story-step4 -n words.txt story2.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind reported errors or memory leaks:
==2942483== Memcheck, a memory error detector
==2942483== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==2942483== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==2942483== Command: ./story-step4 -n words.txt story2.txt
==2942483== Parent PID: 2942482
==2942483== 
==2942483== 
==2942483== HEAP SUMMARY:
==2942483==     in use at exit: 230 bytes in 18 blocks
==2942483==   total heap usage: 41 allocs, 23 frees, 13,946 bytes allocated
==2942483== 
==2942483== 202 (16 direct, 186 indirect) bytes in 1 blocks are definitely lost in loss record 7 of 7
==2942483==    at 0x4848899: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==2942483==    by 0x109801: readWords2 (rand_story.c:58)
==2942483==    by 0x1094B4: main (story-step4.c:30)
==2942483== 
==2942483== LEAK SUMMARY:
==2942483==    definitely lost: 16 bytes in 1 blocks
==2942483==    indirectly lost: 186 bytes in 13 blocks
==2942483==      possibly lost: 0 bytes in 0 blocks
==2942483==    still reachable: 28 bytes in 4 blocks
==2942483==         suppressed: 0 bytes in 0 blocks
==2942483== Reachable blocks (those to which a pointer was found) are not shown.
==2942483== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==2942483== 
==2942483== For lists of detected and suppressed errors, rerun with: -s
==2942483== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

You have NOT passed your test cases!
You should go and figure out/understand where thing went wrong
And fix the problem(s) before the deadline

Overall Grade: NO GRADE YET
