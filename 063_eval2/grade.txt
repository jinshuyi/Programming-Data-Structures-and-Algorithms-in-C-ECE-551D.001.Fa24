Grading at 10/30/2024:01:08:13.992526
For commit ID 91d4c1ca169439f50baa9f79c2a97001a05baa46
Grading at Tue Oct 29 09:08:10 PM EDT 2024
Doing some basic checking for your submission

Step 1
Checking that story-step1 compiles
rm -f *~ story-step3 story-step4 story-step3.o story-step4.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step1.c
gcc -o story-step1 story-step1.o rand_story.o provided.o
rm story-step1.o
The code compiled (good)
Executable story-step1 exists (good)
Checking with provided test case story.txt
Your file matched the expected output
Now running YOUR tests for step 1

1.1: Current test is story-step1 story.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

Step 2
Checking that story-step2 compiles
rm -f *~ story-step3 story-step4 story-step3.o story-step4.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step2.c
gcc -o story-step2 story-step2.o rand_story.o provided.o
rm story-step2.o
The code compiled (good)
Executable story-step2 exists (good)
Now running YOUR tests for step 2

2.1: Current test is story-step2 words.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

Step 3
Checking that story-step3 compiles
rm -f *~ story-step3 story-step4 story-step3.o story-step4.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step3.c
gcc -o story-step3 story-step3.o rand_story.o provided.o
rm story-step3.o
The code compiled (good)
Executable story-step3 exists (good)
Now running YOUR tests for step 3

3.1: Current test is story-step3 words.txt story2.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

Step 4
Checking that story-step4 compiles
rm -f *~ story-step3 story-step4 story-step3.o story-step4.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step4.c
gcc -o story-step4 story-step4.o rand_story.o provided.o
rm story-step4.o
The code compiled (good)
Executable story-step4 exists (good)
Now running YOUR tests for step 4

4.1: Current test is story-step4 words.txt story2.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind reported errors or memory leaks:
==128374== Memcheck, a memory error detector
==128374== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==128374== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==128374== Command: ./story-step4 words.txt story2.txt
==128374== Parent PID: 128373
==128374== 
==128374== 
==128374== HEAP SUMMARY:
==128374==     in use at exit: 28 bytes in 4 blocks
==128374==   total heap usage: 38 allocs, 34 frees, 13,898 bytes allocated
==128374== 
==128374== LEAK SUMMARY:
==128374==    definitely lost: 0 bytes in 0 blocks
==128374==    indirectly lost: 0 bytes in 0 blocks
==128374==      possibly lost: 0 bytes in 0 blocks
==128374==    still reachable: 28 bytes in 4 blocks
==128374==         suppressed: 0 bytes in 0 blocks
==128374== Reachable blocks (those to which a pointer was found) are not shown.
==128374== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==128374== 
==128374== For lists of detected and suppressed errors, rerun with: -s
==128374== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

4.2: Current test is story-step4 -n words.txt story2.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind reported errors or memory leaks:
==128426== Memcheck, a memory error detector
==128426== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==128426== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==128426== Command: ./story-step4 -n words.txt story2.txt
==128426== Parent PID: 128425
==128426== 
==128426== 
==128426== HEAP SUMMARY:
==128426==     in use at exit: 28 bytes in 4 blocks
==128426==   total heap usage: 41 allocs, 37 frees, 13,946 bytes allocated
==128426== 
==128426== LEAK SUMMARY:
==128426==    definitely lost: 0 bytes in 0 blocks
==128426==    indirectly lost: 0 bytes in 0 blocks
==128426==      possibly lost: 0 bytes in 0 blocks
==128426==    still reachable: 28 bytes in 4 blocks
==128426==         suppressed: 0 bytes in 0 blocks
==128426== Reachable blocks (those to which a pointer was found) are not shown.
==128426== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==128426== 
==128426== For lists of detected and suppressed errors, rerun with: -s
==128426== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

You have NOT passed your test cases!
You should go and figure out/understand where thing went wrong
And fix the problem(s) before the deadline

Overall Grade: NO GRADE YET
