Grading at 10/29/2024:14:28:51.938556
For commit ID 1e2d53625fd586cf28d3f572af67bd9573d38ea9
Grading at Tue Oct 29 10:28:48 AM EDT 2024
Doing some basic checking for your submission

Step 1
Checking that story-step1 compiles
rm -f *~ story-step3  story-step3.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step1.c
gcc -o story-step1 story-step1.o rand_story.o provided.o
rm story-step1.o
The code compiled (good)
Executable story-step1 exists (good)
Checking with provided test case story.txt
Your file matched the expected output
Now running YOUR tests for step 1

1.1: Current test is story-step1 story.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

Step 2
Checking that story-step2 compiles
rm -f *~ story-step3  story-step3.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step2.c
gcc -o story-step2 story-step2.o rand_story.o provided.o
rm story-step2.o
The code compiled (good)
Executable story-step2 exists (good)
Now running YOUR tests for step 2

2.1: Current test is story-step2 words.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

Step 3
Checking that story-step3 compiles
rm -f *~ story-step3  story-step3.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step3.c
gcc -o story-step3 story-step3.o rand_story.o provided.o
rm story-step3.o
The code compiled (good)
Executable story-step3 exists (good)
Now running YOUR tests for step 3

3.1: Current test is story-step3 words.txt story2.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind reported errors or memory leaks:
==2926548== Memcheck, a memory error detector
==2926548== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==2926548== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==2926548== Command: ./story-step3 words.txt story2.txt
==2926548== Parent PID: 2926547
==2926548== 
==2926548== 
==2926548== HEAP SUMMARY:
==2926548==     in use at exit: 28 bytes in 4 blocks
==2926548==   total heap usage: 38 allocs, 34 frees, 13,898 bytes allocated
==2926548== 
==2926548== LEAK SUMMARY:
==2926548==    definitely lost: 0 bytes in 0 blocks
==2926548==    indirectly lost: 0 bytes in 0 blocks
==2926548==      possibly lost: 0 bytes in 0 blocks
==2926548==    still reachable: 28 bytes in 4 blocks
==2926548==         suppressed: 0 bytes in 0 blocks
==2926548== Reachable blocks (those to which a pointer was found) are not shown.
==2926548== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==2926548== 
==2926548== For lists of detected and suppressed errors, rerun with: -s
==2926548== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

Step 4
Checking that story-step4 compiles
rm -f *~ story-step3  story-step3.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step4.c
gcc -o story-step4 story-step4.o rand_story.o provided.o
rm story-step4.o
The code compiled (good)
Executable story-step4 exists (good)
Now running YOUR tests for step 4

4.1: Current test is story-step4 words.txt story2.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind reported errors or memory leaks:
==2926608== Memcheck, a memory error detector
==2926608== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==2926608== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==2926608== Command: ./story-step4 words.txt story2.txt
==2926608== Parent PID: 2926607
==2926608== 
==2926608== 
==2926608== HEAP SUMMARY:
==2926608==     in use at exit: 230 bytes in 18 blocks
==2926608==   total heap usage: 38 allocs, 20 frees, 13,898 bytes allocated
==2926608== 
==2926608== 202 (16 direct, 186 indirect) bytes in 1 blocks are definitely lost in loss record 7 of 7
==2926608==    at 0x4848899: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==2926608==    by 0x109801: readWords2 (rand_story.c:58)
==2926608==    by 0x1094B4: main (story-step4.c:30)
==2926608== 
==2926608== LEAK SUMMARY:
==2926608==    definitely lost: 16 bytes in 1 blocks
==2926608==    indirectly lost: 186 bytes in 13 blocks
==2926608==      possibly lost: 0 bytes in 0 blocks
==2926608==    still reachable: 28 bytes in 4 blocks
==2926608==         suppressed: 0 bytes in 0 blocks
==2926608== Reachable blocks (those to which a pointer was found) are not shown.
==2926608== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==2926608== 
==2926608== For lists of detected and suppressed errors, rerun with: -s
==2926608== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

4.2: Current test is story-step4 -n words.txt story2.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind reported errors or memory leaks:
==2926653== Memcheck, a memory error detector
==2926653== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==2926653== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==2926653== Command: ./story-step4 -n words.txt story2.txt
==2926653== Parent PID: 2926652
==2926653== 
==2926653== 
==2926653== HEAP SUMMARY:
==2926653==     in use at exit: 230 bytes in 18 blocks
==2926653==   total heap usage: 41 allocs, 23 frees, 13,946 bytes allocated
==2926653== 
==2926653== 202 (16 direct, 186 indirect) bytes in 1 blocks are definitely lost in loss record 7 of 7
==2926653==    at 0x4848899: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==2926653==    by 0x109801: readWords2 (rand_story.c:58)
==2926653==    by 0x1094B4: main (story-step4.c:30)
==2926653== 
==2926653== LEAK SUMMARY:
==2926653==    definitely lost: 16 bytes in 1 blocks
==2926653==    indirectly lost: 186 bytes in 13 blocks
==2926653==      possibly lost: 0 bytes in 0 blocks
==2926653==    still reachable: 28 bytes in 4 blocks
==2926653==         suppressed: 0 bytes in 0 blocks
==2926653== Reachable blocks (those to which a pointer was found) are not shown.
==2926653== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==2926653== 
==2926653== For lists of detected and suppressed errors, rerun with: -s
==2926653== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

You have NOT passed your test cases!
You should go and figure out/understand where thing went wrong
And fix the problem(s) before the deadline

Overall Grade: NO GRADE YET
